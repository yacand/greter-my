var Game;
(function (Game) {
    "use strict";
    var GameView = (function () {
        function GameView() {
            this._game = null;
            this._stage = null;
            this._data = null;
            this._armatureDisplay = null;
            this._dragging = false;
        }
        GameView.prototype.init = function (game, stage) {
            this._game = game;
            this._stage = stage;
            this._stage.interactive = true;
            var armature = dragonBones.PixiFactory.factory.buildArmature("shipball");
            var armatureDisplay = armature.display;
            armatureDisplay.x = this._game.width * .5;
            armatureDisplay.y = this._game.height * .5;
            armature.addEventListener(dragonBones.EventObject.START, this._animationEventHandler, this);
            armature.addEventListener(dragonBones.EventObject.FRAME_EVENT, this._animationEventHandler, this);
            armature.animation.play("ship-anim-1");
            armature.animation.timeScale = 1;
            var bones = armature.getBones();
            var bone = armature.getBone("boneBall");
            armatureDisplay.interactive = true;
            armatureDisplay.buttonMode = true;
            armatureDisplay.on('pointerdown', this.onDragStart, this);
            armatureDisplay.on('pointerup', this.onDragEnd, this);
            armatureDisplay.on('pointerupoutside', this.onDragEnd, this);
            armatureDisplay.on('pointermove', this.onDragMove, this);
            dragonBones.WorldClock.clock.add(armature);
            this._stage.addChild(armatureDisplay);
            this._armatureDisplay = armatureDisplay;
        };
        GameView.prototype.onDragStart = function (event) {
            this._data = event.data;
            this._data.alpha = 0.5;
            this._dragging = true;
            var newPosition = this._data.getLocalPosition(this._armatureDisplay.parent);
            this._armatureDisplay.x = newPosition.x;
            this._armatureDisplay.y = newPosition.y + this._armatureDisplay.height * 0.5;
        };
        GameView.prototype.onDragEnd = function () {
            this._data.alpha = 1;
            this._dragging = false;
            this._data = null;
            this._armatureDisplay.x = this._game.width * .5;
            this._armatureDisplay.y = this._game.height * .5;
        };
        GameView.prototype.onDragMove = function () {
            if (this._dragging) {
                var newPosition = this._data.getLocalPosition(this._stage);
                this._armatureDisplay.x = newPosition.x;
                this._armatureDisplay.y = newPosition.y + this._armatureDisplay.height * 0.5;
            }
        };
        GameView.prototype._animationEventHandler = function (event) {
            console.log(event.type, event.name, event.animationState.name);
        };
        GameView.prototype._renderHandler = function (deltaTime) {
            dragonBones.WorldClock.clock.advanceTime(-1);
            this._game.render(this._stage);
        };
        return GameView;
    }());
    Game.GameView = GameView;
})(Game || (Game = {}));
var Game;
(function (Game) {
    "use strict";
    var Preloader = (function () {
        function Preloader() {
            "use strict";
            this._game = null;
            this._stage = null;
            this._gameView = null;
        }
        Preloader.prototype.init = function (game, stage) {
            this._game = game;
            this._stage = stage;
            PIXI.ticker.shared.add(this._renderHandler, this);
            PIXI.loader.add("dragonBonesData", "./resources/art_ske.json");
            PIXI.loader.add("textureDataA", "./resources/art_tex.json");
            PIXI.loader.add("textureA", "./resources/art_tex.png");
            PIXI.loader.once("complete", this._loadCompleteHandler, this);
            PIXI.loader.load();
        };
        Preloader.prototype._renderHandler = function (deltaTime) {
            dragonBones.WorldClock.clock.advanceTime(-1);
            this._game.render(this._stage);
        };
        Preloader.prototype._loadCompleteHandler = function (loader, object) {
            dragonBones.PixiFactory.factory.parseDragonBonesData(object["dragonBonesData"].data);
            dragonBones.PixiFactory.factory.parseTextureAtlasData(object["textureDataA"].data, object["textureA"].texture);
            this._gameView = new Game.GameView();
            this._gameView.init(this._game, this._stage);
        };
        return Preloader;
    }());
    Game.Preloader = Preloader;
})(Game || (Game = {}));
var Game;
(function (Game) {
    "use strict";
    var Main = (function () {
        function Main() {
            this._game = new PIXI.WebGLRenderer(250, 250, { backgroundColor: 0xffffff });
            this._stage = new PIXI.Container();
            this._backgroud = new PIXI.Sprite(PIXI.Texture.EMPTY);
        }
        Main.prototype.init = function () {
            document.body.appendChild(this._game.view);
            this._stage.addChild(this._backgroud);
            this._backgroud.width = this._game.width;
            this._backgroud.height = this._game.height;
            this.startPreloader();
        };
        Main.prototype.startPreloader = function () {
            this._preloader = new Game.Preloader();
            this._preloader.init(this._game, this._stage);
        };
        return Main;
    }());
    Game.Main = Main;
})(Game || (Game = {}));
var Game;
(function (Game) {
    "use strict";
    var AppStart = (function () {
        function AppStart() {
        }
        AppStart.prototype.init = function () {
            var main = new Game.Main();
            main.init();
        };
        return AppStart;
    }());
    var appStart = new AppStart();
    appStart.init();
})(Game || (Game = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy90cy9HYW1lL0dhbWVWaWV3LnRzIiwic3JjL3RzL0dhbWUvUHJlbG9hZGVyLnRzIiwic3JjL3RzL0dhbWUvTWFpbi50cyIsInNyYy90cy9BcHBTdGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxJQUFPLElBQUksQ0E2R1Y7QUE3R0QsV0FBTyxJQUFJO0lBRVAsWUFBWSxDQUFBO0lBUVo7UUFTSTtZQVBRLFVBQUssR0FBc0IsSUFBSSxDQUFDO1lBQ2hDLFdBQU0sR0FBa0IsSUFBSSxDQUFDO1lBQzdCLFVBQUssR0FBTyxJQUFJLENBQUM7WUFDakIscUJBQWdCLEdBQW1DLElBQUksQ0FBQztZQUN4RCxjQUFTLEdBQVcsS0FBSyxDQUFDO1FBTWxDLENBQUM7UUFFTSx1QkFBSSxHQUFYLFVBQVksSUFBdUIsRUFBRSxLQUFvQjtZQUVyRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUVwQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDL0IsSUFBSSxRQUFRLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pFLElBQUksZUFBZSxHQUF3QixRQUFRLENBQUMsT0FBTyxDQUFDO1lBQzVELGVBQWUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQzFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQzNDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUYsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMs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QUVJLElBQU0sSUFBSSxHQUFhLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixDQUFDO1FBQ0wsZUFBQztJQUFELENBWEEsQUFXQyxJQUFBO0lBRUQsSUFBTSxRQUFRLEdBQVksSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUN6QyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDcEIsQ0FBQyxFQW5CTSxJQUFJLEtBQUosSUFBSSxRQW1CViIsImZpbGUiOiJBcHBTdGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLzxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2xpYnMvRHJhZ29uQm9uZXNKUy9EcmFnb25Cb25lcy9idWlsZC9kcmFnb25Cb25lcy5kLnRzXCIvPlxuLy8vPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbGlicy9EcmFnb25Cb25lc0pTL1BpeGkvYnVpbGQvZHJhZ29uQm9uZXNQaXhpLmQudHNcIi8+XG5tb2R1bGUgR2FtZVxue1xuICAgIFwidXNlIHN0cmljdFwiXG4gICAgaW1wb3J0IFBvaW50VHlwZSA9IFBJWEkuUG9pbnQ7XG4gICAgaW1wb3J0IEludGVyYWN0aW9uRXZlbnQgPSBQSVhJLmludGVyYWN0aW9uLkludGVyYWN0aW9uRXZlbnQ7XG4gICAgaW1wb3J0IEFybWF0dXJlRGlzcGxheVR5cGUgPSBkcmFnb25Cb25lcy5QaXhpQXJtYXR1cmVEaXNwbGF5O1xuICAgIGltcG9ydCBFdmVudFR5cGUgPSBkcmFnb25Cb25lcy5FdmVudE9iamVjdDtcbiAgICBpbXBvcnQgQm9uZSA9IGRyYWdvbkJvbmVzLkJvbmU7XG5cblxuICAgIGV4cG9ydCBjbGFzcyBHYW1lVmlld1xuICAgIHtcbiAgICAgICAgcHJpdmF0ZSBfZ2FtZTpQSVhJLldlYkdMUmVuZGVyZXIgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9zdGFnZTpQSVhJLkNvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2RhdGE6YW55ID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfYXJtYXR1cmVEaXNwbGF5OmRyYWdvbkJvbmVzLlBpeGlBcm1hdHVyZURpc3BsYXkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9kcmFnZ2luZzpib29sZWFuID0gZmFsc2U7XG5cblxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxuICAgICAgICB7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KGdhbWU6UElYSS5XZWJHTFJlbmRlcmVyLCBzdGFnZTpQSVhJLkNvbnRhaW5lcik6dm9pZFxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9nYW1lID0gZ2FtZTtcbiAgICAgICAgICAgIHRoaXMuX3N0YWdlID0gc3RhZ2U7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YWdlLmludGVyYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBhcm1hdHVyZSA9IGRyYWdvbkJvbmVzLlBpeGlGYWN0b3J5LmZhY3RvcnkuYnVpbGRBcm1hdHVyZShcInNoaXBiYWxsXCIpO1xuICAgICAgICAgICAgdmFyIGFybWF0dXJlRGlzcGxheSA9IDxBcm1hdHVyZURpc3BsYXlUeXBlPmFybWF0dXJlLmRpc3BsYXk7XG4gICAgICAgICAgICBhcm1hdHVyZURpc3BsYXkueCA9IHRoaXMuX2dhbWUud2lkdGggKiAuNTtcbiAgICAgICAgICAgIGFybWF0dXJlRGlzcGxheS55ID0gdGhpcy5fZ2FtZS5oZWlnaHQgKiAuNTtcbiAgICAgICAgICAgIGFybWF0dXJlLmFkZEV2ZW50TGlzdGVuZXIoZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuU1RBUlQsIHRoaXMuX2FuaW1hdGlvbkV2ZW50SGFuZGxlciwgdGhpcyk7XG4gICAgICAgICAgICBhcm1hdHVyZS5hZGRFdmVudExpc3RlbmVyKGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkZSQU1FX0VWRU5ULCB0aGlzLl9hbmltYXRpb25FdmVudEhhbmRsZXIsIHRoaXMpO1xuICAgICAgICAgICAgYXJtYXR1cmUuYW5pbWF0aW9uLnBsYXkoXCJzaGlwLWFuaW0tMVwiKTtcbiAgICAgICAgICAgIC8vYXJtYXR1cmUuYW5pbWF0aW9uLnBsYXkoXCJzaGlwLWFuaW0tMlwiKTtcbiAgICAgICAgICAgIGFybWF0dXJlLmFuaW1hdGlvbi50aW1lU2NhbGUgPSAxO1xuICAgICAgICAgICAgLy9hcm1hdHVyZS5hbmltYXRpb24uZmFkZUluKFwic2hpcC1hbmltLTJcIiwgMiwgMik7XG4gICAgICAgICAgICAvL2FybWF0dXJlLmFuaW1hdGlvbi50aW1lU2NhbGUgPSAwLjE7XG4gICAgICAgICAgICB2YXIgYm9uZXM6QXJyYXk8Qm9uZT4gPSBhcm1hdHVyZS5nZXRCb25lcygpO1xuICAgICAgICAgICAgdmFyIGJvbmU6Qm9uZSA9IGFybWF0dXJlLmdldEJvbmUoXCJib25lQmFsbFwiKTtcbiAgICAgICAgICAgIC8vYm9uZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyB2YXIgYXJtYXR1cmUgPSBkcmFnb25Cb25lcy5QaXhpRmFjdG9yeS5mYWN0b3J5LmJ1aWxkQXJtYXR1cmUoXCJhcm1hdHVyZVwiKTtcbiAgICAgICAgICAgIC8vIHZhciBhcm1hdHVyZURpc3BsYXkgPSA8QXJtYXR1cmVEaXNwbGF5VHlwZT5hcm1hdHVyZS5kaXNwbGF5O1xuICAgICAgICAgICAgLy8gYXJtYXR1cmVEaXNwbGF5LnggPSB0aGlzLl9nYW1lLndpZHRoICogLjU7XG4gICAgICAgICAgICAvLyBhcm1hdHVyZURpc3BsYXkueSA9IHRoaXMuX2dhbWUuaGVpZ2h0ICogLjU7XG4gICAgICAgICAgICAvLyBhcm1hdHVyZS5hbmltYXRpb24ucGxheShcIm5ld0FuaW1hdGlvblwiKTtcbiAgICAgICAgICAgIGFybWF0dXJlRGlzcGxheS5pbnRlcmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBhcm1hdHVyZURpc3BsYXkuYnV0dG9uTW9kZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGFybWF0dXJlRGlzcGxheS5vbigncG9pbnRlcmRvd24nLCB0aGlzLm9uRHJhZ1N0YXJ0LCB0aGlzKTtcbiAgICAgICAgICAgIGFybWF0dXJlRGlzcGxheS5vbigncG9pbnRlcnVwJywgdGhpcy5vbkRyYWdFbmQsIHRoaXMpO1xuICAgICAgICAgICAgYXJtYXR1cmVEaXNwbGF5Lm9uKCdwb2ludGVydXBvdXRzaWRlJywgdGhpcy5vbkRyYWdFbmQsIHRoaXMpO1xuICAgICAgICAgICAgYXJtYXR1cmVEaXNwbGF5Lm9uKCdwb2ludGVybW92ZScsIHRoaXMub25EcmFnTW92ZSwgdGhpcyk7XG4gICAgICAgICAgICAvL3ZhciBpbnRlcmFjdGlvbk1hbmFnZXI6UElYSS5pbnRlcmFjdGlvbi5JbnRlcmFjdGlvbk1hbmFnZXIgPSBuZXcgUElYSS5pbnRlcmFjdGlvbi5JbnRlcmFjdGlvbk1hbmFnZXIodGhpcy5fZ2FtZSk7XG4gICAgICAgICAgICBkcmFnb25Cb25lcy5Xb3JsZENsb2NrLmNsb2NrLmFkZChhcm1hdHVyZSk7XG4gICAgICAgICAgICB0aGlzLl9zdGFnZS5hZGRDaGlsZChhcm1hdHVyZURpc3BsYXkpO1xuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmVEaXNwbGF5ID0gYXJtYXR1cmVEaXNwbGF5O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBvbkRyYWdTdGFydChldmVudDpJbnRlcmFjdGlvbkV2ZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBzdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgZGF0YVxuICAgICAgICAgICAgLy8gdGhlIHJlYXNvbiBmb3IgdGhpcyBpcyBiZWNhdXNlIG9mIG11bHRpdG91Y2hcbiAgICAgICAgICAgIC8vIHdlIHdhbnQgdG8gdHJhY2sgdGhlIG1vdmVtZW50IG9mIHRoaXMgcGFydGljdWxhciB0b3VjaFxuXG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEuYWxwaGEgPSAwLjU7XG4gICAgICAgICAgICB0aGlzLl9kcmFnZ2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgIHZhciBuZXdQb3NpdGlvbiA9IHRoaXMuX2RhdGEuZ2V0TG9jYWxQb3NpdGlvbih0aGlzLl9hcm1hdHVyZURpc3BsYXkucGFyZW50KTtcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlRGlzcGxheS54ID0gbmV3UG9zaXRpb24ueDtcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlRGlzcGxheS55ID0gbmV3UG9zaXRpb24ueSArIHRoaXMuX2FybWF0dXJlRGlzcGxheS5oZWlnaHQgKiAwLjU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIG9uRHJhZ0VuZCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEuYWxwaGEgPSAxO1xuICAgICAgICAgICAgdGhpcy5fZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHNldCB0aGUgaW50ZXJhY3Rpb24gZGF0YSB0byBudWxsXG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmVEaXNwbGF5LnggPSB0aGlzLl9nYW1lLndpZHRoICogLjU7XG4gICAgICAgICAgICB0aGlzLl9hcm1hdHVyZURpc3BsYXkueSA9IHRoaXMuX2dhbWUuaGVpZ2h0ICogLjU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIG9uRHJhZ01vdmUoKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZih0aGlzLl9kcmFnZ2luZylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3UG9zaXRpb24gPSB0aGlzLl9kYXRhLmdldExvY2FsUG9zaXRpb24odGhpcy5fc3RhZ2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlRGlzcGxheS54ID0gbmV3UG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZURpc3BsYXkueSA9IG5ld1Bvc2l0aW9uLnkgKyB0aGlzLl9hcm1hdHVyZURpc3BsYXkuaGVpZ2h0ICogMC41O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYW5pbWF0aW9uRXZlbnRIYW5kbGVyKGV2ZW50OkV2ZW50VHlwZSk6dm9pZFxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudC50eXBlLCBldmVudC5uYW1lLCBldmVudC5hbmltYXRpb25TdGF0ZS5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3JlbmRlckhhbmRsZXIoZGVsdGFUaW1lOm51bWJlcik6dm9pZFxuICAgICAgICB7XG4gICAgICAgICAgICBkcmFnb25Cb25lcy5Xb3JsZENsb2NrLmNsb2NrLmFkdmFuY2VUaW1lKC0xKTtcbiAgICAgICAgICAgIHRoaXMuX2dhbWUucmVuZGVyKHRoaXMuX3N0YWdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cIkdhbWVWaWV3LnRzXCIvPlxuLy8vPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbGlicy9EcmFnb25Cb25lc0pTL0RyYWdvbkJvbmVzL2J1aWxkL2RyYWdvbkJvbmVzLmQudHNcIi8+XG5tb2R1bGUgR2FtZVxue1xuICAgIFwidXNlIHN0cmljdFwiXG5cbiAgICBleHBvcnQgY2xhc3MgUHJlbG9hZGVyXG4gICAge1xuICAgICAgICBwcml2YXRlIF9nYW1lID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfc3RhZ2UgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9nYW1lVmlldzpHYW1lVmlldyA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCJcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KGdhbWU6UElYSS5XZWJHTFJlbmRlcmVyLCBzdGFnZTpQSVhJLkNvbnRhaW5lcik6dm9pZFxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9nYW1lID0gZ2FtZTtcbiAgICAgICAgICAgIHRoaXMuX3N0YWdlID0gc3RhZ2U7XG5cbiAgICAgICAgICAgIFBJWEkudGlja2VyLnNoYXJlZC5hZGQodGhpcy5fcmVuZGVySGFuZGxlciwgdGhpcyk7XG5cbiAgICAgICAgICAgIFBJWEkubG9hZGVyLmFkZChcImRyYWdvbkJvbmVzRGF0YVwiLCBcIi4vcmVzb3VyY2VzL2FydF9za2UuanNvblwiKTtcbiAgICAgICAgICAgIFBJWEkubG9hZGVyLmFkZChcInRleHR1cmVEYXRhQVwiLCBcIi4vcmVzb3VyY2VzL2FydF90ZXguanNvblwiKTtcbiAgICAgICAgICAgIFBJWEkubG9hZGVyLmFkZChcInRleHR1cmVBXCIsIFwiLi9yZXNvdXJjZXMvYXJ0X3RleC5wbmdcIik7XG4gICAgICAgICAgICBQSVhJLmxvYWRlci5vbmNlKFwiY29tcGxldGVcIiwgdGhpcy5fbG9hZENvbXBsZXRlSGFuZGxlciwgdGhpcyk7XG4gICAgICAgICAgICBQSVhJLmxvYWRlci5sb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZW5kZXJIYW5kbGVyKGRlbHRhVGltZTpudW1iZXIpOnZvaWRcbiAgICAgICAge1xuICAgICAgICAgICAgZHJhZ29uQm9uZXMuV29ybGRDbG9jay5jbG9jay5hZHZhbmNlVGltZSgtMSk7XG4gICAgICAgICAgICB0aGlzLl9nYW1lLnJlbmRlcih0aGlzLl9zdGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9sb2FkQ29tcGxldGVIYW5kbGVyKGxvYWRlcjpQSVhJLmxvYWRlcnMuTG9hZGVyLCBvYmplY3Q6ZHJhZ29uQm9uZXMuTWFwPFBJWEkubG9hZGVycy5SZXNvdXJjZT4pOnZvaWRcbiAgICAgICAge1xuICAgICAgICAgICAgZHJhZ29uQm9uZXMuUGl4aUZhY3RvcnkuZmFjdG9yeS5wYXJzZURyYWdvbkJvbmVzRGF0YShvYmplY3RbXCJkcmFnb25Cb25lc0RhdGFcIl0uZGF0YSk7XG4gICAgICAgICAgICBkcmFnb25Cb25lcy5QaXhpRmFjdG9yeS5mYWN0b3J5LnBhcnNlVGV4dHVyZUF0bGFzRGF0YShvYmplY3RbXCJ0ZXh0dXJlRGF0YUFcIl0uZGF0YSwgb2JqZWN0W1widGV4dHVyZUFcIl0udGV4dHVyZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2dhbWVWaWV3ID0gbmV3IEdhbWVWaWV3KCk7XG4gICAgICAgICAgICB0aGlzLl9nYW1lVmlldy5pbml0KHRoaXMuX2dhbWUsIHRoaXMuX3N0YWdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2xpYnMvUGl4aS9waXhpLmpzLmQudHNcIi8+XG4vLy88cmVmZXJlbmNlIHBhdGg9XCJQcmVsb2FkZXIudHNcIi8+XG5tb2R1bGUgR2FtZVxue1xuICAgIFwidXNlIHN0cmljdFwiXG5cbiAgICBleHBvcnQgY2xhc3MgTWFpblxuICAgIHtcbiAgICAgICAgcHJpdmF0ZSBfZ2FtZSA9IG5ldyBQSVhJLldlYkdMUmVuZGVyZXIoMjUwLCAyNTAsIHtiYWNrZ3JvdW5kQ29sb3I6MHhmZmZmZmZ9KTtcbiAgICAgICAgcHJpdmF0ZSBfc3RhZ2UgPSBuZXcgUElYSS5Db250YWluZXIoKTtcbiAgICAgICAgcHJpdmF0ZSBfYmFja2dyb3VkOlBJWEkuU3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlKFBJWEkuVGV4dHVyZS5FTVBUWSk7XG4gICAgICAgIHByaXZhdGUgX3ByZWxvYWRlcjpQcmVsb2FkZXI7XG5cbiAgICAgICAgY29uc3RydWN0b3IoKVxuICAgICAgICB7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW5pdCgpOnZvaWRcbiAgICAgICAge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9nYW1lLnZpZXcpO1xuICAgICAgICAgICAgdGhpcy5fc3RhZ2UuYWRkQ2hpbGQodGhpcy5fYmFja2dyb3VkKTtcbiAgICAgICAgICAgIHRoaXMuX2JhY2tncm91ZC53aWR0aCA9IHRoaXMuX2dhbWUud2lkdGg7XG4gICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdWQuaGVpZ2h0ID0gdGhpcy5fZ2FtZS5oZWlnaHQ7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhcnRQcmVsb2FkZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgc3RhcnRQcmVsb2FkZXIoKTp2b2lkXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZWxvYWRlciA9IG5ldyBQcmVsb2FkZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByZWxvYWRlci5pbml0KHRoaXMuX2dhbWUsIHRoaXMuX3N0YWdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cIkdhbWUvTWFpbi50c1wiLz5cbm1vZHVsZSBHYW1lXG57XG4gICAgXCJ1c2Ugc3RyaWN0XCJcblxuICAgIGNsYXNzIEFwcFN0YXJ0XG4gICAge1xuICAgICAgICBjb25zdHJ1Y3RvcigpXG4gICAgICAgIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCk6dm9pZFxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBtYWluOkdhbWUuTWFpbiA9IG5ldyBHYW1lLk1haW4oKTtcbiAgICAgICAgICAgIG1haW4uaW5pdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYXBwU3RhcnQ6QXBwU3RhcnQgPSBuZXcgQXBwU3RhcnQoKTtcbiAgICBhcHBTdGFydC5pbml0KCk7XG59XG4iXX0=
